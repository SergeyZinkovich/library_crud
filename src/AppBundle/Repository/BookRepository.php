<?php

namespace AppBundle\Repository;

use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\QueryBuilder;

/**
 * BookRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BookRepository extends \Doctrine\ORM\EntityRepository
{
    public function getBooksWithFilter($bookFilter)
    {
        $query = $this->createQueryBuilder('book')
            ->innerJoin(
                'book.authors',
                'authors'
            );
        if ($bookFilter->title !== null && $bookFilter->title !== ''){
            $query->andWhere('book.title LIKE :title')
                ->setParameter('title', '%'.$bookFilter->title.'%');
        }
        if ($bookFilter->description !== null && $bookFilter->description !== ''){
            $query->andWhere('book.description LIKE :description')
                ->setParameter('description', '%'.$bookFilter->description.'%');
        }
        if ($bookFilter->dateFrom !== null && $bookFilter->dateFrom !== ''){
            $query->andWhere('book.publicationDate >= :publicationDateFrom')
                ->setParameter('publicationDateFrom', $bookFilter->dateFrom);
        }
        if ($bookFilter->dateTo !== null && $bookFilter->dateTo !== '') {
            $query->andWhere('book.publicationDate <= :publicationDateTo')
                ->setParameter('publicationDateTo', $bookFilter->dateTo);
        }
        if ($bookFilter->authors !== null && $bookFilter->authors !== '' && count($bookFilter->authors) !== 0) {
            foreach ($bookFilter->authors as $author) {
                $query->andWhere('authors IN (:authors)')
                    ->setParameter('authors', $bookFilter->authors);
            }
            $query->addGroupBy('book.id');
            $query->having('COUNT(authors) = :count')
                ->setParameter('count', count($bookFilter->authors));
        }
        return $query->getQuery();
    }

    public function getBooksWithTwoAuthorsNative()
    {
        $sql = 'Select T.book_id, title, description, publicationDate, name, author_id from
         (SELECT book_id, count(*) c
         FROM symfony.book_author
         INNER JOIN symfony.author on author_id = id
         group by book_id) as T
         INNER JOIN symfony.book_author ba on ba.book_id = T.book_id
         INNER JOIN symfony.book b on T.book_id = b.id
         INNER JOIN author authors on author_id = authors.id
         where c = 2';
        $rsm = new ResultSetMapping();
        $rsm->addEntityResult('AppBundle:Book', 'book')
        ->addFieldResult('book', 'book_id', 'id')
        ->addFieldResult('book', 'title', 'title')
        ->addFieldResult('book', 'description', 'description')
        ->addFieldResult('book', 'publicationDate', 'publicationDate')
        ->addJoinedEntityResult('AppBundle:Author', 'author', 'book', 'authors')
        ->addMetaResult('author', 'author_id', 'id', true)
        ->addMetaResult('author', 'name', 'name', true);
        return $this->_em->createNativeQuery($sql, $rsm);
    }

    public function getBooksWithTwoAuthorsDql()
    {
        $query = new QueryBuilder($this->_em);
        $query->select('book')
            ->from('AppBundle\Entity\Book', 'book')
            ->innerJoin('book.authors', 'authors')
            ->addGroupBy('book.id')
            ->having('COUNT(authors) = 2');
        return $query->getQuery();
    }
}
